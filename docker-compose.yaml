services:
  postgres:
    image: postgres:17-alpine
    restart: always
    environment:
      POSTGRES_USER: '${POSTGRES_USER}'
      POSTGRES_PASSWORD: '${POSTGRES_PASSWORD}'
      POSTGRES_DB: '${POSTGRES_DB}'
    ports:
      - '${POSTGRES_PORT}:${POSTGRES_PORT}'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER}']
      interval: 5s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    restart: always
    ports:
      - '8080:8080'

  loki:
    image: grafana/loki:latest
    ports:
      - '3100:3100'
    command: -config.file=/etc/loki/local-config.yaml

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml.template:/etc/prometheus/prometheus.yml.template
    entrypoint:
      - /bin/sh
      - -c
      - |
        sed 's|{HOST}|host.docker.internal|g; s|{API_PORT}|'"$API_PORT"'|g' /etc/prometheus/prometheus.yml.template > /etc/prometheus/prometheus.yml && \
        exec prometheus --config.file=/etc/prometheus/prometheus.yml
    ports:
      - '9090:9090'

  grafana:
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy 
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
    image: grafana/grafana:latest
    ports:
      - '3000:3000'

  insight:
    build:
      context: .
      args:
        PORT: ${API_PORT} # Pass API_PORT from .env file
    ports:
      - '${API_PORT}:${API_PORT}' # Map host port to container port
    env_file:
      - .env # Ensure .env file is loaded for environment variables
    environment:
      - NODE_ENV=development # Set NODE_ENV to development
    command: pnpm run start:prod # Run the app in production mode
    depends_on:
      - loki # Ensure Loki starts before insight
      - postgres # Ensure Postgres starts before insight
